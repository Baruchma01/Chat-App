{"version":3,"sources":["App.css","containers/Join/Join.css","containers/Chat/Chat.css","containers/Join/Join.js","containers/Chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Join","history","useHistory","useState","username","room","joinFormField","setJoinFormField","changeFormHandler","e","target","name","value","className","classes","JoinContainer","JoinHeader","JoinMain","Form","FormControl","Label","Input","type","id","placeholder","required","userName","onChange","RoomSelect","JoinBtn","onClick","preventDefault","alert","push","user","socket","openSocket","process","Chat","location","msg","setMsg","roomMessage","setRoomMessage","activeUsers","setActiveUsers","currentRoom","setCurrentRoom","state","useEffect","emit","on","message","users","ChatContainer","ChatHeader","href","Btn","ChatMain","ChatSideBar","map","key","ChatMessage","Math","random","Message","Meta","time","text","ChatFormContainer","length","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d921ce81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App_1o-Fp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"JoinContainer\":\"Join_JoinContainer_mzhOJ\",\"Form\":\"Join_Form_2xH_G\",\"JoinHeader\":\"Join_JoinHeader_2vSHS\",\"JoinMain\":\"Join_JoinMain_7r5Hx\",\"FormControl\":\"Join_FormControl_15nah\",\"Label\":\"Join_Label_P2xU5\",\"Input\":\"Join_Input_ALbMY\",\"RoomSelect\":\"Join_RoomSelect_SyDLf\",\"JoinBtn\":\"Join_JoinBtn_1taSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatContainer\":\"Chat_ChatContainer_2ua3w\",\"ChatHeader\":\"Chat_ChatHeader_34Ied\",\"ChatMain\":\"Chat_ChatMain_1GFeE\",\"ChatSideBar\":\"Chat_ChatSideBar_27dID\",\"ChatMessage\":\"Chat_ChatMessage_SKgWJ\",\"Message\":\"Chat_Message_27en9\",\"Meta\":\"Chat_Meta_nkav1\",\"ChatFormContainer\":\"Chat_ChatFormContainer_3Diof\",\"Btn\":\"Chat_Btn_1eEZm\"};","import React, { useState } from \"react\";\nimport classes from \"./Join.css\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Join = () => {\n  const history = new useHistory();\n  const [joinFormField, setJoinFormField] = useState({\n    username: \"\",\n    room: \"JavaScript\",\n  });\n\n  const changeFormHandler = (e) => {\n    setJoinFormField({\n      ...joinFormField,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const joinChatHandler = (e) => {\n    e.preventDefault();\n    if (joinFormField.username === \"\") {\n      alert(\"אנא מלא את שדה השם\");\n    } else {\n      history.push('/chat', {\n        user: joinFormField\n      });\n    }\n  };\n\n\n\n  return (\n    <div className={classes.JoinContainer}>\n      <header className={classes.JoinHeader}>\n        <h1>\n          <i className=\"fas fa-comments\"></i> DeveloperChat\n        </h1>\n      </header>\n      <main className={classes.JoinMain}>\n        <form className={classes.Form}>\n          <div className={classes.FormControl}>\n            <label className={classes.Label}>NickName</label>\n            <input\n              className={classes.Input}\n              type=\"text\"\n              name=\"username\"\n              id=\"username\"\n              placeholder=\"Enter nickname...\"\n              required\n              value={joinFormField.userName}\n              onChange={changeFormHandler}\n            />\n          </div>\n          <div className={classes.FormControl}>\n            <label className={classes.Label}>Choose Room</label>\n            <select\n              className={classes.RoomSelect}\n              name=\"room\"\n              id=\"room\"\n              value={joinFormField.room}\n              onChange={changeFormHandler}\n            >\n              <option value=\"JavaScript\">JavaScript</option>\n              <option value=\"Python\">Python</option>\n              <option value=\"PHP\">PHP</option>\n              <option value=\"C#\">C#</option>\n              <option value=\"Ruby\">Ruby</option>\n              <option value=\"Java\">Java</option>\n            </select>\n          </div>\n          <button className={classes.JoinBtn} onClick={joinChatHandler}>Join Chat</button>\n        </form>\n      </main>\n    </div>\n  );\n};\n\nexport default Join;\n","import React, { useState, useEffect } from \"react\";\nimport classes from \"./Chat.css\";\nimport openSocket from \"socket.io-client\";\nconst socket = openSocket(process.env.REACT_APP_API_URI);\nconst Chat = ({ location }) => {\n  const [msg, setMsg] = useState(\"\");\n  const [roomMessage, setRoomMessage] = useState([]);\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [currentRoom, setCurrentRoom] = useState(\"\");\n\n  const { username, room } = location.state.user;\n\n  useEffect(() => {\n    socket.emit(\"joinRoom\", { username, room });\n  }, []);\n\n  // Get message from the server\n  socket.on(\"message\", (message) => {\n    setRoomMessage([...roomMessage, message]);\n  });\n\n  // Get room and users\n  socket.on(\"roomUsers\", ({ room, users }) => {\n    setActiveUsers(users);\n    setCurrentRoom(room);\n  });\n\n  const submitMessageHandler = (e) => {\n    e.preventDefault();\n    if (msg.length === 0) {\n      alert(\"error: empty msg\");\n    } else {\n      socket.emit(\"chatMessage\", msg);\n      setMsg('');\n    }\n  };\n\n  const handleMsgChange = (e) => {\n    setMsg(e.target.value);\n  };\n\n  return (\n    <div className={classes.ChatContainer}>\n      <header className={classes.ChatHeader}>\n        <h1>\n          <i className=\"fas fa-smile\"></i> ChatCord\n        </h1>\n        <a href=\"/\" className={classes.Btn}>\n          Leave Room\n        </a>\n      </header>\n      <main className={classes.ChatMain}>\n        <div className={classes.ChatSideBar}>\n          <h3>\n            <i className=\"fas fa-comments\"></i> Room Name:\n          </h3>\n          <h2 id=\"room-name\">{currentRoom}</h2>\n          <h3>\n            <i className=\"fas fa-users\"></i> Users\n          </h3>\n          <ul id=\"users\">\n            {(activeUsers || []).map((user) => (\n              <li key={user.id}>{user.username}</li>\n            ))}\n          </ul>\n        </div>\n        <div className={classes.ChatMessage}>\n          {(roomMessage || []).map((message) => (\n            <div key={Math.random()} className={classes.Message}>\n              <p className={classes.Meta}>\n                {message.username} <span>{message.time}</span>\n              </p>\n              <p className=\"text\">{message.text}</p>\n            </div>\n          ))}\n        </div>\n      </main>\n      <div className={classes.ChatFormContainer}>\n        <form id=\"chat-form\">\n          <input\n            id=\"msg\"\n            type=\"text\"\n            placeholder=\"Enter Message\"\n            value={msg}\n            onChange={handleMsgChange}\n          />\n          <button className={classes.Btn} onClick={submitMessageHandler}>\n            <i className=\"fas fa-paper-plane\"></i> Send\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Join from './containers/Join/Join';\nimport Chat from './containers/Chat/Chat';\nimport classes from './App.css';\n\nfunction App() {\n  return (\n    <Router>\n    <div className={classes.App}>\n    <Route exact path=\"/\" component={Join} />\n      <Switch>\n      <Route exact path=\"/chat\" component={Chat} />\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}